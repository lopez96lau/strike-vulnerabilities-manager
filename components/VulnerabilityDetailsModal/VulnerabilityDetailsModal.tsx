"use client";
import React from "react";
import {
  EMPTY_VULNERABILITY,
  USERS,
  VULNERABILITY_SEVERITIES,
  VULNERABILITY_STATUSES,
} from "@/app/vulnerabilities/constants";
import {
  Breadcrumbs,
  ButtonDropdown,
  Input,
  Keyboard,
  Modal,
  Select,
  Text,
  Textarea,
  useToasts,
} from "@geist-ui/core";
import {
  getSeverityIcon,
  getSeverityValue,
  getStatusColor,
} from "@/utils/assets";
import { Vulnerability } from "@/app/vulnerabilities/types";
import Image from "next/image";
import { ExternalLink } from "@geist-ui/icons";
import Link from "next/link";

interface ModalProps {
  isOpen: boolean;
  isUpdating: boolean;
  handleClose: () => void;
  handleSubmit: (updatedData?: Vulnerability) => void;
  formData: Vulnerability;
  setFormData: React.Dispatch<React.SetStateAction<Vulnerability>>;
  isEditing: boolean;
  handleDelete: () => void;
}

const statusColorVariants = {
  gray: "bg-gray-900",
  pink: "bg-pink-900",
  amber: "bg-amber-900",
  blue: "bg-blue-900",
  red: "bg-red-900",
  green: "bg-green-900",
};

export const VulnerabilityDetailsModal = ({
  isOpen,
  isUpdating,
  handleClose,
  handleSubmit,
  formData,
  setFormData,
  handleDelete,
}: ModalProps) => {
  const { setToast } = useToasts();
  const closeModal = () => {
    setFormData(EMPTY_VULNERABILITY);
    handleClose();
  };

  const validateStatusChange = (newStatus: string): boolean => {
    if (newStatus === "In Progress" && !formData.assignedTo) {
      setToast({
        text: (
          <div className="hypens-auto">
            You must assign an <b>user</b> before moving to this state
          </div>
        ),
        type: "error",
        delay: 2000,
      });
      return false;
    }

    if (["Validation", "False Positive", "Solved"].includes(newStatus)) {
      if (!formData.assignedTo || !formData.evidence) {
        setToast({
          text: (
            <div className="hypens-auto">
              You must assign an <b>user</b> and provide <b>evidence</b> before
              moving to this status
            </div>
          ),
          type: "error",
          delay: 2000,
        });
        return false;
      }
    }

    return true;
  };

  const handleStatusChange = async (newStatus: string) => {
    if (!validateStatusChange(newStatus)) return;

    const updatedData = { ...formData, status: newStatus };
    setFormData(updatedData);
    handleSubmit(updatedData);
  };

  return (
    <form id="vulnerability-form">
      <Modal visible={isOpen} onClose={closeModal} width={2.2}>
        <Modal.Title className="!w-full">
          <div className="w-full flex justify-between items-center">
            <Breadcrumbs className="!w-full">
              <Breadcrumbs.Item>Vulnerabilty #{formData.id}</Breadcrumbs.Item>
              <Breadcrumbs.Item>
                <Link
                  href={`https://cwe.mitre.org/data/definitions/${formData.cwe.replace(
                    "CWE-",
                    ""
                  )}.html`}
                  target="_blank"
                >
                  <Keyboard className="!min-w-fit !h-fit">
                    <div className="flex gap-2 items-center w-full">
                      {formData.cwe}
                      <ExternalLink />
                    </div>
                  </Keyboard>
                </Link>
              </Breadcrumbs.Item>
              <Breadcrumbs.Item>
                <div className="flex gap-1 items-center">
                  <span
                    className={`${
                      statusColorVariants[getStatusColor(formData.status)]
                    } flex w-2.5 h-2.5  rounded-full me-1.5 shrink-0 ml-0.5`}
                  ></span>
                  {formData.status}
                </div>
              </Breadcrumbs.Item>
            </Breadcrumbs>
            <ButtonDropdown className="!border-gray-600">
              <ButtonDropdown.Item
                main
                className="flex !justify-start !px-3 !text-white"
              >
                <b>Update Status</b>
              </ButtonDropdown.Item>
              {VULNERABILITY_STATUSES.map((status) => {
                return (
                  <ButtonDropdown.Item
                    value={status.name}
                    key={status.id}
                    className={`flex !justify-start !px-3 ${
                      formData.status === status.name
                        ? "!opacity-50 !cursor-not-allowed"
                        : ""
                    }`}
                    disabled={formData.status === status.name}
                    onClick={() => handleStatusChange(status.name)}
                  >
                    <div className="flex gap-1 items-center">
                      <span
                        className={`${
                          statusColorVariants[
                            status.color as keyof typeof statusColorVariants
                          ]
                        } flex w-2.5 h-2.5  rounded-full me-1.5 shrink-0 ml-0.5`}
                      ></span>
                      {status.name}
                    </div>
                  </ButtonDropdown.Item>
                );
              })}
            </ButtonDropdown>
          </div>
        </Modal.Title>
        <Modal.Content className="flex flex-col gap-6">
          <div className="flex flex-col w-full gap-1.5">
            <Text span>Title</Text>
            <Input
              width="100%"
              value={formData.title}
              onChange={(e) =>
                setFormData({ ...formData, title: e.target.value })
              }
              font={1.3}
              height={1.5}
              onPointerEnterCapture={undefined}
              onPointerLeaveCapture={undefined}
              crossOrigin={undefined}
            />
          </div>
          <div className="flex flex-col w-full gap-1.5">
            <Text span>Description</Text>
            <Textarea
              width="100%"
              resize="vertical"
              value={formData.description}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              onPointerEnterCapture={undefined}
              onPointerLeaveCapture={undefined}
            />
          </div>
          <div className="flex gap-3">
            <div className="flex flex-col w-full gap-1.5">
              <Text span>CVSS Severity</Text>
              <Select
                width="100%"
                placeholder="Select"
                value={formData.severity}
                height={1.5}
                onChange={(val) =>
                  setFormData({ ...formData, severity: val as string })
                }
                onPointerEnterCapture={undefined}
                onPointerLeaveCapture={undefined}
              >
                {VULNERABILITY_SEVERITIES.map((severity) => (
                  <Select.Option
                    value={severity.name}
                    key={severity.id}
                    font={1.3}
                  >
                    <div className="flex gap-2 items-center">
                      {getSeverityIcon(getSeverityValue(severity.name))}
                      {severity.name}
                    </div>
                  </Select.Option>
                ))}
              </Select>
            </div>
            <div className="flex flex-col w-full gap-1.5">
              <Text span>Asignee</Text>
              <Select
                width="100%"
                placeholder="Select user"
                value={formData.assignedTo}
                height={1.5}
                onChange={(val) =>
                  setFormData({ ...formData, assignedTo: val as string })
                }
                onPointerEnterCapture={undefined}
                onPointerLeaveCapture={undefined}
              >
                {USERS.map((user) => {
                  return (
                    <Select.Option
                      value={user.id.toString()}
                      key={user.id}
                      font={1.3}
                      height={1.5}
                    >
                      <div className="flex gap-3 items-center my-2 h-full">
                        <Image
                          src={user.src}
                          alt="avatar"
                          width={32}
                          height={32}
                          className="rounded-full border border-gray-400"
                        />
                        {user.name}
                      </div>
                    </Select.Option>
                  );
                })}
              </Select>
            </div>
          </div>
          <div className="flex flex-col w-full gap-1.5">
            <Text span>Evidence</Text>
            <Input
              width="100%"
              value={formData.evidence || ""}
              placeholder="Add evidence URL"
              onChange={(e) =>
                setFormData({ ...formData, evidence: e.target.value })
              }
              onPointerEnterCapture={undefined}
              onPointerLeaveCapture={undefined}
              crossOrigin={undefined}
            />
          </div>
        </Modal.Content>
        <Modal.Action
          onClick={handleDelete}
          type="error"
          onPointerEnterCapture={undefined}
          onPointerLeaveCapture={undefined}
          placeholder=""
          className="!text-red-900 !bg-red-50"
        >
          Delete
        </Modal.Action>
        <Modal.Action
          passive
          onClick={closeModal}
          onPointerEnterCapture={undefined}
          onPointerLeaveCapture={undefined}
          placeholder=""
        >
          Cancel
        </Modal.Action>
        <Modal.Action
          onClick={() => handleSubmit(formData)}
          loading={isUpdating}
          disabled={Object.values(formData).some((x) => x === "")}
          onPointerEnterCapture={undefined}
          onPointerLeaveCapture={undefined}
          placeholder=""
        >
          Update
        </Modal.Action>
      </Modal>
    </form>
  );
};
