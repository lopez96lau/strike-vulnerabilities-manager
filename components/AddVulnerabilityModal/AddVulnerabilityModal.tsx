"use client";
import React, { useEffect, useState } from "react";
import {
  EMPTY_VULNERABILITY,
  VULNERABILITY_SEVERITIES,
  VULNERABILITY_STATUSES,
} from "@/app/vulnerabilities/constants";
import {
  Button,
  Fieldset,
  Input,
  Keyboard,
  Modal,
  Select,
  Spinner,
  Text,
} from "@geist-ui/core";
import { getSeverityIcon, getSeverityValue } from "@/utils/assets";
import { useDebounce } from "@/hooks/useDebounce";
import { AlertTriangle, ArrowUpRight, Search } from "@geist-ui/icons";
import Link from "next/link";
import Image from "next/image";
import empty from "@/public/assets/images/emptyState.svg";
import { CWEData, Vulnerability } from "@/app/vulnerabilities/types";

interface ModalProps {
  isOpen: boolean;
  isUpdating: boolean;
  handleClose: () => void;
  handleSubmit: () => void;
  formData: Vulnerability;
  setFormData: React.Dispatch<React.SetStateAction<Vulnerability>>;
}

export const AddVulnerabilityModal = ({
  isOpen,
  isUpdating,
  handleClose,
  handleSubmit,
  formData,
  setFormData,
}: ModalProps) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [isSearching, setIsSearching] = useState(false);
  const debouncedSearchTerm = useDebounce(searchTerm, 500);
  const [cweData, setCweData] = useState<CWEData | null>(null);
  const [hasNoResults, setHasNoResults] = useState(false);

  useEffect(() => {
    const searchCWE = async () => {
      if (debouncedSearchTerm && /^\d+$/.test(debouncedSearchTerm)) {
        setIsSearching(true);
        try {
          const response = await fetch(`/api/cwe/${debouncedSearchTerm}`);
          if (response.ok) {
            const rawData = await response.json();
            const weakness = rawData["Weaknesses"][0];

            if (!weakness) {
              setHasNoResults(true);
              setCweData(null);
              return;
            }

            const parsedData: CWEData = {
              id: weakness.ID,
              name: weakness.Name,
              description: weakness.Description,
              likelihood: weakness.LikelihoodOfExploit,
              consequences: Array.from(
                new Set(
                  weakness.CommonConsequences?.flatMap(
                    (consequence: { Impact: string[] }) =>
                      consequence.Impact.flatMap((impact) => impact.split(", "))
                  ) || []
                )
              ).sort(),
              mitigations:
                weakness.PotentialMitigations?.map(
                  (mitigation: { Description: string }) =>
                    mitigation.Description.trim()
                ) || [],
            };

            setCweData(parsedData);
            setFormData({
              ...formData,
              cwe: `CWE-${debouncedSearchTerm}`,
              title: parsedData.name,
              description: parsedData.description,
            });
          } else {
            setCweData(null);
            setHasNoResults(true);
          }
        } catch (error) {
          console.error("Error searching CWE:", error);
          setCweData(null);
          setHasNoResults(true);
        } finally {
          setIsSearching(false);
        }
      }
    };

    searchCWE();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [debouncedSearchTerm]);

  const closeModal = () => {
    setFormData(EMPTY_VULNERABILITY);
    setSearchTerm("");
    setCweData(null);
    setHasNoResults(false);
    handleClose();
  };

  return (
    <form id="vulnerability-form">
      <Modal visible={isOpen} onClose={closeModal} width={2.2}>
        <Modal.Title>
          <Input
            width="100%"
            placeholder="Search by CWE..."
            clearable
            value={searchTerm}
            icon={isSearching ? <Spinner /> : <Search />}
            onChange={(e) => {
              if (e.target.value === "") {
                setSearchTerm("");
                setCweData(null);
                setHasNoResults(false);
                setFormData({ ...formData, title: "", description: "" });
              } else {
                setSearchTerm(e.target.value.replace(/\D/g, ""));
              }
            }}
            height={1.5}
            font={1.5}
            onClearClick={() => {
              setSearchTerm("");
              setCweData(null);
              setHasNoResults(false);
              setFormData({ ...formData, title: "", description: "" });
            }}
            onPointerEnterCapture={undefined}
            onPointerLeaveCapture={undefined}
            crossOrigin={undefined}
          />
        </Modal.Title>
        {cweData && (
          <Modal.Content className="flex flex-col gap-6">
            <>
              <Fieldset.Group value="Details">
                <Fieldset label="Details">
                  <Fieldset.Title>
                    <div className="flex gap-3">
                      <Keyboard className="!min-w-fit !h-fit">
                        CWE-{cweData.id}
                      </Keyboard>
                      {cweData.name}
                    </div>
                  </Fieldset.Title>
                  <Fieldset.Subtitle className="hyphens-auto">
                    {cweData.description}
                  </Fieldset.Subtitle>
                  {cweData.likelihood && (
                    <Fieldset.Subtitle>
                      <div className="flex gap-2 items-center">
                        <AlertTriangle size={16} />
                        <b>Likelyhood of Exploit:</b> {cweData.likelihood}
                      </div>
                    </Fieldset.Subtitle>
                  )}
                  <Fieldset.Footer>
                    MITRE Knowledge Base
                    <Link
                      href={`https://cwe.mitre.org/data/definitions/${cweData.id}.html`}
                      target="_blank"
                    >
                      <Button
                        auto
                        scale={1 / 3}
                        font="12px"
                        iconRight={<ArrowUpRight />}
                        placeholder={undefined}
                        onPointerEnterCapture={undefined}
                        onPointerLeaveCapture={undefined}
                      >
                        Visit source
                      </Button>
                    </Link>
                  </Fieldset.Footer>
                </Fieldset>

                {cweData.consequences.length > 0 && (
                  <Fieldset label="Consequences">
                    <Fieldset.Title>Common Consequences</Fieldset.Title>
                    <Fieldset.Subtitle className="hyphens-auto">
                      <ul className="list-disc pl-5">
                        {cweData.consequences.map((consequence, idx) => (
                          <li key={idx}>
                            <Text>{consequence?.toString()}</Text>
                          </li>
                        ))}
                      </ul>
                    </Fieldset.Subtitle>
                    <Fieldset.Footer>
                      MITRE Knowledge Base
                      <Link
                        href={`https://cwe.mitre.org/data/definitions/${cweData.id}.html`}
                        target="_blank"
                      >
                        <Button
                          auto
                          scale={1 / 3}
                          font="12px"
                          iconRight={<ArrowUpRight />}
                          placeholder={undefined}
                          onPointerEnterCapture={undefined}
                          onPointerLeaveCapture={undefined}
                        >
                          Visit source
                        </Button>
                      </Link>
                    </Fieldset.Footer>
                  </Fieldset>
                )}

                {cweData.mitigations.length > 0 && (
                  <Fieldset label="Mitigations">
                    <Fieldset.Title>Suggested Mitigations</Fieldset.Title>
                    <Fieldset.Subtitle className="hyphens-auto">
                      <ul className="list-disc pl-5">
                        {cweData.mitigations.map((mitigation, idx) => (
                          <li key={idx}>
                            <Text>{mitigation}</Text>
                          </li>
                        ))}
                      </ul>
                    </Fieldset.Subtitle>
                    <Fieldset.Footer>
                      MITRE Knowledge Base
                      <Link
                        href={`https://cwe.mitre.org/data/definitions/${cweData.id}.html`}
                        target="_blank"
                      >
                        <Button
                          auto
                          scale={1 / 3}
                          font="12px"
                          iconRight={<ArrowUpRight />}
                          placeholder={undefined}
                          onPointerEnterCapture={undefined}
                          onPointerLeaveCapture={undefined}
                        >
                          Visit source
                        </Button>
                      </Link>
                    </Fieldset.Footer>
                  </Fieldset>
                )}
              </Fieldset.Group>

              <div className="flex gap-3">
                <div className="flex flex-col w-full gap-1.5">
                  <Text span>CVSS Severity</Text>
                  <Select
                    width="100%"
                    placeholder="Select"
                    value={formData.severity}
                    height={1.5}
                    onChange={(val) =>
                      setFormData({ ...formData, severity: val as string })
                    }
                    onPointerEnterCapture={undefined}
                    onPointerLeaveCapture={undefined}
                  >
                    {VULNERABILITY_SEVERITIES.map((severity) => (
                      <Select.Option
                        value={severity.name}
                        key={severity.id}
                        font={1.3}
                      >
                        <div className="flex gap-2 items-center">
                          {getSeverityIcon(getSeverityValue(severity.name))}
                          {severity.name}
                        </div>
                      </Select.Option>
                    ))}
                  </Select>
                </div>
                <div className="flex flex-col w-full gap-1.5">
                  <Text span>Status</Text>
                  <Select
                    width="100%"
                    placeholder="Status"
                    value={formData.status}
                    height={1.5}
                    onChange={(val) =>
                      setFormData({ ...formData, status: val as string })
                    }
                    onPointerEnterCapture={undefined}
                    onPointerLeaveCapture={undefined}
                  >
                    {VULNERABILITY_STATUSES.slice(0, 2).map((status) => {
                      const statusColorVariants = {
                        gray: "bg-gray-900",
                        pink: "bg-pink-900",
                        amber: "bg-amber-900",
                        blue: "bg-blue-900",
                        red: "bg-red-900",
                        green: "bg-green-900",
                      };
                      return (
                        <Select.Option
                          value={status.name}
                          key={status.id}
                          font={1.3}
                        >
                          <div className="flex gap-1 items-center">
                            <span
                              className={`${
                                statusColorVariants[
                                  status.color as keyof typeof statusColorVariants
                                ]
                              } flex w-2.5 h-2.5  rounded-full me-1.5 shrink-0 ml-0.5`}
                            ></span>
                            {status.name}
                          </div>
                        </Select.Option>
                      );
                    })}
                  </Select>
                </div>
              </div>
            </>
          </Modal.Content>
        )}
        {!cweData && hasNoResults && (
          <Modal.Content>
            <div className="flex flex-col p-4 w-full h-full items-center justify-center">
              <Image src={empty} alt="" />
              <Text h3 className="mb-0">
                No data was found for your search
              </Text>
            </div>
          </Modal.Content>
        )}

        <Modal.Action
          passive={true}
          onClick={closeModal}
          placeholder={undefined}
          onPointerEnterCapture={undefined}
          onPointerLeaveCapture={undefined}
        >
          Cancel
        </Modal.Action>
        <Modal.Action
          placeholder={undefined}
          onPointerEnterCapture={undefined}
          onPointerLeaveCapture={undefined}
          onClick={handleSubmit}
          loading={isUpdating}
          disabled={Object.values(formData).some((x) => x === "")}
          passive={Object.values(formData).some((x) => x === "")}
        >
          Create Vulnerability
        </Modal.Action>
      </Modal>
    </form>
  );
};
