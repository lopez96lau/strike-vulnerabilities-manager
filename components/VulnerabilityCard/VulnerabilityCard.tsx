import React from "react";
import Badge from "../Badge";
import Link from "next/link";
import Image from "next/image";
import { Card, Text } from "@geist-ui/core";
import { ExternalLink, Shield } from "@geist-ui/icons";
import { parseDate } from "@/utils/dates";
import { Vulnerability } from "@/app/vulnerabilities/types";
import {
  getSeverityColor,
  getSeverityIcon,
  getSeverityValue,
} from "@/utils/assets";
import { USERS } from "@/app/vulnerabilities/constants";

interface CardProps extends Vulnerability {
  color: string;
  onClick?: () => void;
}

const hoverColorVariants = {
  gray: "hover:!border-gray-700",
  pink: "hover:!border-pink-700",
  amber: "hover:!border-amber-700",
  blue: "hover:!border-blue-700",
  red: "hover:!border-red-700",
  green: "hover:!border-green-700",
};

export const VulnerabilityCard = ({
  id,
  color,
  severity,
  cwe,
  createdAt,
  title,
  description,
  assignedTo,
  evidence,
  onClick,
}: CardProps) => {
  const assignedUser = USERS.filter(
    (user) => assignedTo === user.id.toString()
  )?.[0];

  return (
    <Card
      key={id}
      shadow
      onClick={onClick}
      className={`${
        hoverColorVariants[color as keyof typeof hoverColorVariants]
      } w-full cursor-pointer border gap-2 transition duration-600 ease-in-out select-none`}
    >
      <div className="flex flex-col gap-2">
        <div className="flex items-center justify-between pb-3">
          <div className="flex items-center gap-2">
            <Badge
              color={getSeverityColor(getSeverityValue(severity))}
              title={severity}
            >
              {getSeverityIcon(getSeverityValue(severity))}
            </Badge>
            <Badge label={cwe} color={color}>
              <Shield size={16} />
            </Badge>
          </div>
          {assignedUser && (
            <div className="h-fit">
              <Image
                src={assignedUser.src}
                alt="avatar"
                width={32}
                height={32}
                title={assignedUser.name}
                className="rounded-full border border-gray-400"
              />
            </div>
          )}
        </div>
      </div>
      <Text small className="!text-gray-600">
        {parseDate(createdAt)}
      </Text>
      <Text h4 className="overflow-hidden truncate m-0">
        {title}
      </Text>
      <Text small className="hyphens-auto">
        {description}
      </Text>
      <div className="mt-2">
        {evidence ? (
          <Link
            href={evidence}
            target="_blank"
            className="text-sm"
            referrerPolicy="no-referrer"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex items-center gap-1">
              Evidence
              <ExternalLink size={16} />
            </div>
          </Link>
        ) : (
          <Text small className="!text-gray-600">
            No evidence attached.
          </Text>
        )}
      </div>
    </Card>
  );
};
