import { useState } from "react";
import { Vulnerability } from "@/app/vulnerabilities/types";

export function useVulnerabilityFilters() {
  const [filters, setFilters] = useState<
    Record<string, { severity?: string; sortBy?: string }>
  >({});

  const filterAndSortVulnerabilities = (
    vulnerabilities: Vulnerability[],
    statusName: string
  ) => {
    let filtered = [...vulnerabilities];
    const columnFilters = filters[statusName] || {};

    if (columnFilters.severity) {
      filtered = filtered.filter((v) => v.severity === columnFilters.severity);
    }

    if (columnFilters.sortBy) {
      filtered.sort((a, b) => {
        switch (columnFilters.sortBy) {
          case "severity":
            return b.severity.localeCompare(a.severity);
          case "date":
            return (
              new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
            );
          case "title":
            return a.title.localeCompare(b.title);
          default:
            return 0;
        }
      });
    }

    return filtered;
  };

  return {
    filters,
    setFilters,
    filterAndSortVulnerabilities,
  };
}
